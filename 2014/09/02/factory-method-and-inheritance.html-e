<!DOCTYPE html><html><head><meta charset=utf-8><meta http-equiv=X-UA-Compatible content="IE=edge,chrome=1"><title>Factory Method And Inheritance</title><meta name=description content="Go Golang Code Examples programming"><meta name=viewport content="width=device-width"><link rel="shortcut icon" href=/favicon.ico type=image/x-icon><link rel=icon href=/favicon.ico type=image/x-icon><link rel=stylesheet href=/golang-code-examples/styles/main.d9bf.css><script src=https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js></script><!--[if lt IE 9]>
    <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]--><meta name=viewport content="width=device-width, initial-scale=1, user-scalable=no"><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
                m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-53073815-1', 'auto');
        ga('send', 'pageview');</script></head><body><div id=dialogoverlay class=dialogoverlay></div><div id=dialogbox class=dialogbox><div><div id=dialogboxhead class=dialogboxhead></div><div id=dialogboxbody class=dialogboxbody></div><div id=dialogboxfoot class=dialogboxfoot></div></div></div><div class=site><header><h1><a class=home-link href="/golang-code-examples">Golang Code Examples</a></h1></header><div id=banner><span id=logo></span> <a href=https://github.com/l3x/golang-code-examples class="button fork"><strong>View On GitHub</strong></a><div class=downloads><span>Downloads:</span><ul><li><a href=https://github.com/l3x/golang-code-examples/zipball/master class=button>ZIP</a></li><li><a href=https://github.com/l3x/golang-code-examples/tarball/master class=button>TAR</a></li></ul></div></div><!-- end banner --><div class=wrapper><nav><ul></ul></nav><div class=page-title><h2>Factory Method And Inheritance</h2><p class=meta>02 Sep 2014</p></div><div class=post><section><h2>Description</h2><p>This example demonstrates an OOP pattern (<strong>Factory Method</strong>) and a way to achieve code reuse via composition.</p><p>Granted, Go does not support type/class inheritance--There is no <strong>Is-A</strong> relationship in Go. However, the benefits of code reuse and encapsulation can still be achieved in Go via <strong>Has-A</strong> relationships.</p><p>Composition over inheritance in object-oriented programming is a technique by which classes may achieve polymorphic behavior and code reuse by containing other classes that implement the desired functionality instead of through inheritance.</p><h3>Composition</h3><ul><li>The Widget_iface <strong>interface</strong> is composed of methods that each Widget implements</li><li>SetInfo and GetInfo that are only implemented once, but <strong>reused</strong> by all Widgets</li><li>Each widget <strong>has-a</strong> WidgetInfo object</li></ul><p>Go uses type composition to achieve the benefits of inheritance:<ul><li>Code Reuse</li><li>Encapsulation</li></ul></p><p>An implementation of composition over inheritance begins with the creation of various interfaces representing the behaviors that the system must exhibit.</p><p>The use of interfaces allows this technique to support the polymorphic behavior that is so valuable in object-oriented programming.</p><p>Classes implementing the identified interfaces are built and added to business-domain classes as needed.</p><p>Thus, desired system behaviors are realized without inheritance.</p><hr><h2>Golang Features</h2><p>This golang code sample demonstrates the following go language features:</p><ul><li>constants with iota</li><li>strconv (int to string conversion)</li><li>structs</li><li>methods</li><li>empty struct</li><li>anonymous field</li><li>pointers</li><li>maps</li><li>interface compliance</li></ul><p><br></p><h2>3rd Party Libraries</h2><ul><li><a href=https://github.com/go-goodies/go_oops>go_oops</a></li><li><a href="https://github.com/remogatto/prettytest/">prettytest</a></li></ul><p>PrettyTest is used to test the go_oops package in this code example.</p><hr><h2>Code Example</h2><h3>widget.go</h3><div class=highlight><pre><code class="go language-go" data-lang=go><span class=kn>package</span> <span class=nx>factory_method_with_reuse</span>

<span class=kn>import</span> <span class=p>(</span>
    <span class=s>&quot;strconv&quot;</span>
<span class=p>)</span>

<span class=c1>// WidgetType indicates which type (WidgetA or WidgetB) is created</span>
<span class=kd>type</span> <span class=nx>WidgetType</span> <span class=kt>int</span>

<span class=kd>const</span> <span class=p>(</span>
    <span class=nx>Widget_A</span> <span class=p>=</span> <span class=kc>iota</span>  <span class=c1>// start at 0 and increment by 1</span>
    <span class=nx>Widget_B</span>
<span class=p>)</span>

<span class=c1>// Widget is the domain type that this example manipulates</span>
<span class=kd>type</span> <span class=nx>Widget</span> <span class=kd>struct</span> <span class=p>{</span>
    <span class=nx>WidgetInfo</span>      <span class=c1>// Anonymous field</span>
<span class=p>}</span>

<span class=c1>// WidgetInfo is an Embedded type that contains widget data</span>
<span class=kd>type</span> <span class=nx>WidgetInfo</span> <span class=kd>struct</span> <span class=p>{</span>
    <span class=nx>id</span>   <span class=kt>int</span>
    <span class=nx>name</span> <span class=kt>string</span>
<span class=p>}</span>

<span class=c1>// SetInfo is the WidgetInfo method used to set the widget&#39;s id and name</span>
<span class=kd>func</span> <span class=p>(</span><span class=nx>wi</span> <span class=o>*</span><span class=nx>WidgetInfo</span><span class=p>)</span> <span class=nx>SetInfo</span><span class=p>(</span><span class=nx>id</span> <span class=kt>int</span><span class=p>,</span> <span class=nx>name</span> <span class=kt>string</span><span class=p>)</span> <span class=p>{</span>
    <span class=nx>wi</span><span class=p>.</span><span class=nx>id</span> <span class=p>=</span> <span class=nx>id</span>
    <span class=nx>wi</span><span class=p>.</span><span class=nx>name</span> <span class=p>=</span> <span class=nx>name</span>
<span class=p>}</span>

<span class=c1>// GetInfo is the WidgetInfo method used to return the WidgetInfo object</span>
<span class=kd>func</span> <span class=p>(</span><span class=nx>wi</span> <span class=nx>WidgetInfo</span><span class=p>)</span> <span class=nx>GetInfo</span><span class=p>()</span> <span class=nx>WidgetInfo</span> <span class=p>{</span>
    <span class=k>return</span> <span class=nx>wi</span>
<span class=p>}</span>

<span class=c1>// GetInfo is the WidgetInfo method used to return the WidgetInfo object</span>
<span class=kd>func</span> <span class=p>(</span><span class=nx>wi</span> <span class=nx>WidgetInfo</span><span class=p>)</span> <span class=nx>String</span><span class=p>()</span> <span class=kt>string</span> <span class=p>{</span>
    <span class=k>return</span> <span class=nx>strconv</span><span class=p>.</span><span class=nx>Itoa</span><span class=p>(</span><span class=nx>wi</span><span class=p>.</span><span class=nx>id</span><span class=p>)</span> <span class=o>+</span> <span class=s>&quot;_&quot;</span> <span class=o>+</span> <span class=nx>wi</span><span class=p>.</span><span class=nx>name</span>
<span class=p>}</span>

<span class=c1>// Widget_iface is describing a Widget. Widgets are an unordered, unique list of values.</span>
<span class=kd>type</span> <span class=nx>Widget_iface</span> <span class=kd>interface</span> <span class=p>{</span>
    <span class=nx>SetInfo</span><span class=p>(</span><span class=nx>id</span> <span class=kt>int</span><span class=p>,</span> <span class=nx>name</span> <span class=kt>string</span><span class=p>)</span>    <span class=c1>// reuse</span>
    <span class=nx>GetInfo</span><span class=p>()</span> <span class=nx>WidgetInfo</span>            <span class=c1>// reuse</span>
    <span class=nx>Add</span><span class=p>(</span><span class=nx>items</span> <span class=o>...</span><span class=kd>interface</span><span class=p>{})</span>
    <span class=nx>Remove</span><span class=p>(</span><span class=nx>items</span> <span class=o>...</span><span class=kd>interface</span><span class=p>{})</span>
    <span class=nx>IsEqual</span><span class=p>(</span><span class=nx>a</span> <span class=nx>Widget_iface</span><span class=p>)</span> <span class=kt>bool</span>
    <span class=nx>Size</span><span class=p>()</span> <span class=kt>int</span>
<span class=p>}</span>

<span class=c1>// String displays the string name of the specified widget</span>
<span class=kd>func</span> <span class=p>(</span><span class=nx>s</span> <span class=nx>WidgetType</span><span class=p>)</span> <span class=nx>String</span><span class=p>()</span> <span class=kt>string</span> <span class=p>{</span>
    <span class=k>switch</span> <span class=nx>s</span> <span class=p>{</span>
    <span class=k>case</span> <span class=nx>Widget_A</span><span class=p>:</span>
        <span class=k>return</span> <span class=s>&quot;WidgetA&quot;</span>
    <span class=k>case</span> <span class=nx>Widget_B</span><span class=p>:</span>
        <span class=k>return</span> <span class=s>&quot;WidgetB&quot;</span>
    <span class=p>}</span>
    <span class=k>return</span> <span class=s>&quot;&quot;</span>
<span class=p>}</span>

<span class=c1>// Create a new Widget interface based on WidgetType and set WidgetInfo</span>
<span class=kd>func</span> <span class=nx>New</span><span class=p>(</span><span class=nx>wt</span> <span class=nx>WidgetType</span><span class=p>,</span> <span class=nx>wi</span> <span class=nx>WidgetInfo</span><span class=p>)</span> <span class=nx>Widget_iface</span> <span class=p>{</span>
    <span class=k>switch</span> <span class=nx>wt</span> <span class=p>{</span>
    <span class=k>case</span> <span class=nx>Widget_A</span><span class=p>:</span>
        <span class=k>return</span> <span class=nx>newWidgetA</span><span class=p>(</span><span class=nx>wi</span><span class=p>)</span>
    <span class=k>case</span> <span class=nx>Widget_B</span><span class=p>:</span>
        <span class=k>return</span> <span class=nx>newWidgetB</span><span class=p>(</span><span class=nx>wi</span><span class=p>)</span>
    <span class=p>}</span>
    <span class=k>return</span> <span class=kc>nil</span>
<span class=p>}</span>
</code></pre></div><h3>widgetA.go</h3><div class=highlight><pre><code class="go language-go" data-lang=go><span class=kn>package</span> <span class=nx>factory_method_with_reuse</span>

<span class=c1>// WidgetA&#39;s internal data map</span>
<span class=kd>type</span> <span class=nx>dataA</span> <span class=kd>struct</span> <span class=p>{</span>
    <span class=nx>m</span> <span class=kd>map</span><span class=p>[</span><span class=kd>interface</span><span class=p>{}]</span><span class=kd>struct</span><span class=p>{}</span>
<span class=p>}</span>

<span class=c1>// WidgetA&#39;s anonymous properties</span>
<span class=kd>type</span> <span class=nx>WidgetA</span> <span class=kd>struct</span> <span class=p>{</span>
    <span class=nx>WidgetInfo</span>
    <span class=nx>dataA</span>
<span class=p>}</span>

<span class=c1>// Create WidgetA data map</span>
<span class=kd>func</span> <span class=nx>newWidgetA</span><span class=p>(</span><span class=nx>wi</span> <span class=nx>WidgetInfo</span><span class=p>)</span> <span class=o>*</span><span class=nx>WidgetA</span> <span class=p>{</span>
    <span class=nx>w</span> <span class=o>:=</span> <span class=o>&amp;</span><span class=nx>WidgetA</span><span class=p>{}</span>
    <span class=nx>w</span><span class=p>.</span><span class=nx>WidgetInfo</span> <span class=p>=</span> <span class=nx>wi</span>
    <span class=nx>w</span><span class=p>.</span><span class=nx>m</span> <span class=p>=</span> <span class=nb>make</span><span class=p>(</span><span class=kd>map</span><span class=p>[</span><span class=kd>interface</span><span class=p>{}]</span><span class=kd>struct</span><span class=p>{})</span>
    <span class=kd>var</span> <span class=nx>_</span> <span class=nx>Widget_iface</span> <span class=p>=</span> <span class=nx>w</span>  <span class=c1>// Enforce interface compliance</span>
    <span class=k>return</span> <span class=nx>w</span>
<span class=p>}</span>

<span class=c1>// Add any number of items to the map</span>
<span class=kd>func</span> <span class=p>(</span><span class=nx>d</span> <span class=o>*</span><span class=nx>dataA</span><span class=p>)</span> <span class=nx>Add</span><span class=p>(</span><span class=nx>items</span> <span class=o>...</span><span class=kd>interface</span><span class=p>{})</span> <span class=p>{</span>
    <span class=k>if</span> <span class=nb>len</span><span class=p>(</span><span class=nx>items</span><span class=p>)</span> <span class=o>==</span> <span class=mi>0</span> <span class=p>{</span>
        <span class=k>return</span>
    <span class=p>}</span>
    <span class=k>for</span> <span class=nx>_</span><span class=p>,</span> <span class=nx>item</span> <span class=o>:=</span> <span class=k>range</span> <span class=nx>items</span> <span class=p>{</span>
        <span class=nx>d</span><span class=p>.</span><span class=nx>m</span><span class=p>[</span><span class=nx>item</span><span class=p>]</span> <span class=p>=</span> <span class=kd>struct</span><span class=p>{}{}</span>
    <span class=p>}</span>
<span class=p>}</span>

<span class=c1>// Remove items from the data map</span>
<span class=kd>func</span> <span class=p>(</span><span class=nx>d</span> <span class=o>*</span><span class=nx>dataA</span><span class=p>)</span> <span class=nx>Remove</span><span class=p>(</span><span class=nx>items</span> <span class=o>...</span><span class=kd>interface</span><span class=p>{})</span> <span class=p>{</span>
    <span class=k>if</span> <span class=nb>len</span><span class=p>(</span><span class=nx>items</span><span class=p>)</span> <span class=o>==</span> <span class=mi>0</span> <span class=p>{</span>
        <span class=k>return</span>
    <span class=p>}</span>
    <span class=k>for</span> <span class=nx>_</span><span class=p>,</span> <span class=nx>item</span> <span class=o>:=</span> <span class=k>range</span> <span class=nx>items</span> <span class=p>{</span>
        <span class=nb>delete</span><span class=p>(</span><span class=nx>d</span><span class=p>.</span><span class=nx>m</span><span class=p>,</span> <span class=nx>item</span><span class=p>)</span>
    <span class=p>}</span>
<span class=p>}</span>

<span class=c1>// Size returns the number of items in a set</span>
<span class=kd>func</span> <span class=p>(</span><span class=nx>d</span> <span class=o>*</span><span class=nx>dataA</span><span class=p>)</span> <span class=nx>Size</span><span class=p>()</span> <span class=kt>int</span> <span class=p>{</span>
    <span class=k>return</span> <span class=nb>len</span><span class=p>(</span><span class=nx>d</span><span class=p>.</span><span class=nx>m</span><span class=p>)</span>
<span class=p>}</span>

<span class=c1>// IsEqual tests whether d and a have the same items</span>
<span class=kd>func</span> <span class=p>(</span><span class=nx>d</span> <span class=o>*</span><span class=nx>WidgetA</span><span class=p>)</span> <span class=nx>IsEqual</span><span class=p>(</span><span class=nx>a</span> <span class=nx>Widget_iface</span><span class=p>)</span> <span class=kt>bool</span> <span class=p>{</span>
    <span class=k>if</span> <span class=nx>sameSize</span> <span class=o>:=</span> <span class=nb>len</span><span class=p>(</span><span class=nx>d</span><span class=p>.</span><span class=nx>m</span><span class=p>)</span> <span class=o>==</span> <span class=nx>a</span><span class=p>.</span><span class=nx>Size</span><span class=p>();</span> <span class=p>!</span><span class=nx>sameSize</span> <span class=p>{</span>
        <span class=k>return</span> <span class=kc>false</span>
    <span class=p>}</span>
    <span class=k>if</span> <span class=nx>a</span><span class=p>.</span><span class=nx>GetInfo</span><span class=p>().</span><span class=nx>String</span><span class=p>()</span> <span class=o>!=</span> <span class=nx>d</span><span class=p>.</span><span class=nx>GetInfo</span><span class=p>().</span><span class=nx>String</span><span class=p>()</span> <span class=p>{</span>
        <span class=k>return</span> <span class=kc>false</span>
    <span class=p>}</span>
    <span class=k>return</span> <span class=kc>true</span>
<span class=p>}</span>

<span class=c1>// IsEmpty indicates whether the Set is empty</span>
<span class=kd>func</span> <span class=p>(</span><span class=nx>d</span> <span class=o>*</span><span class=nx>dataA</span><span class=p>)</span> <span class=nx>IsEmpty</span><span class=p>()</span> <span class=kt>bool</span> <span class=p>{</span>
    <span class=k>return</span> <span class=nx>d</span><span class=p>.</span><span class=nx>Size</span><span class=p>()</span> <span class=o>==</span> <span class=mi>0</span>
<span class=p>}</span>
</code></pre></div><h3>widgetB.go</h3><div class=highlight><pre><code class="go language-go" data-lang=go><span class=kn>package</span> <span class=nx>factory_method_with_reuse</span>

<span class=c1>// WidgetB&#39;s internal data set</span>
<span class=kd>type</span> <span class=nx>dataB</span> <span class=kd>struct</span> <span class=p>{</span>
    <span class=nx>m</span> <span class=kd>map</span><span class=p>[</span><span class=kd>interface</span><span class=p>{}]</span><span class=kd>struct</span><span class=p>{}</span>
<span class=p>}</span>

<span class=c1>// WidgetB&#39;s anonymous properties</span>
<span class=kd>type</span> <span class=nx>WidgetB</span> <span class=kd>struct</span> <span class=p>{</span>
    <span class=nx>WidgetInfo</span>
    <span class=nx>dataA</span>
<span class=p>}</span>

<span class=c1>// Create WidgetB data and set</span>
<span class=kd>func</span> <span class=nx>newWidgetB</span><span class=p>(</span><span class=nx>wi</span> <span class=nx>WidgetInfo</span><span class=p>)</span> <span class=o>*</span><span class=nx>WidgetB</span> <span class=p>{</span>
    <span class=nx>w</span> <span class=o>:=</span> <span class=o>&amp;</span><span class=nx>WidgetB</span><span class=p>{}</span>
    <span class=nx>w</span><span class=p>.</span><span class=nx>WidgetInfo</span> <span class=p>=</span> <span class=nx>wi</span>
    <span class=nx>w</span><span class=p>.</span><span class=nx>m</span> <span class=p>=</span> <span class=nb>make</span><span class=p>(</span><span class=kd>map</span><span class=p>[</span><span class=kd>interface</span><span class=p>{}]</span><span class=kd>struct</span><span class=p>{})</span>
    <span class=kd>var</span> <span class=nx>_</span> <span class=nx>Widget_iface</span> <span class=p>=</span> <span class=nx>w</span>  <span class=c1>// Enforce interface compliance</span>
    <span class=k>return</span> <span class=nx>w</span>
<span class=p>}</span>

<span class=c1>// Add any number of items to the set</span>
<span class=kd>func</span> <span class=p>(</span><span class=nx>d</span> <span class=o>*</span><span class=nx>dataB</span><span class=p>)</span> <span class=nx>Add</span><span class=p>(</span><span class=nx>items</span> <span class=o>...</span><span class=kd>interface</span><span class=p>{})</span> <span class=p>{</span>
    <span class=k>if</span> <span class=nb>len</span><span class=p>(</span><span class=nx>items</span><span class=p>)</span> <span class=o>==</span> <span class=mi>0</span> <span class=p>{</span>
        <span class=k>return</span>
    <span class=p>}</span>
    <span class=k>for</span> <span class=nx>_</span><span class=p>,</span> <span class=nx>item</span> <span class=o>:=</span> <span class=k>range</span> <span class=nx>items</span> <span class=p>{</span>
        <span class=nx>d</span><span class=p>.</span><span class=nx>m</span><span class=p>[</span><span class=nx>item</span><span class=p>]</span> <span class=p>=</span> <span class=kd>struct</span><span class=p>{}{}</span>
    <span class=p>}</span>
<span class=p>}</span>

<span class=c1>// Remove items from the set</span>
<span class=kd>func</span> <span class=p>(</span><span class=nx>d</span> <span class=o>*</span><span class=nx>dataB</span><span class=p>)</span> <span class=nx>Remove</span><span class=p>(</span><span class=nx>items</span> <span class=o>...</span><span class=kd>interface</span><span class=p>{})</span> <span class=p>{</span>
    <span class=k>if</span> <span class=nb>len</span><span class=p>(</span><span class=nx>items</span><span class=p>)</span> <span class=o>==</span> <span class=mi>0</span> <span class=p>{</span>
        <span class=k>return</span>
    <span class=p>}</span>
    <span class=k>for</span> <span class=nx>_</span><span class=p>,</span> <span class=nx>item</span> <span class=o>:=</span> <span class=k>range</span> <span class=nx>items</span> <span class=p>{</span>
        <span class=nb>delete</span><span class=p>(</span><span class=nx>d</span><span class=p>.</span><span class=nx>m</span><span class=p>,</span> <span class=nx>item</span><span class=p>)</span>
    <span class=p>}</span>
<span class=p>}</span>

<span class=c1>// Size returns the number of items in a set</span>
<span class=kd>func</span> <span class=p>(</span><span class=nx>d</span> <span class=o>*</span><span class=nx>dataB</span><span class=p>)</span> <span class=nx>Size</span><span class=p>()</span> <span class=kt>int</span> <span class=p>{</span>
    <span class=k>return</span> <span class=nb>len</span><span class=p>(</span><span class=nx>d</span><span class=p>.</span><span class=nx>m</span><span class=p>)</span>
<span class=p>}</span>

<span class=c1>// IsEqual tests whether d and a have the same items</span>
<span class=kd>func</span> <span class=p>(</span><span class=nx>d</span> <span class=o>*</span><span class=nx>WidgetB</span><span class=p>)</span> <span class=nx>IsEqual</span><span class=p>(</span><span class=nx>a</span> <span class=nx>Widget_iface</span><span class=p>)</span> <span class=kt>bool</span> <span class=p>{</span>
    <span class=k>if</span> <span class=nx>sameSize</span> <span class=o>:=</span> <span class=nb>len</span><span class=p>(</span><span class=nx>d</span><span class=p>.</span><span class=nx>m</span><span class=p>)</span> <span class=o>==</span> <span class=nx>a</span><span class=p>.</span><span class=nx>Size</span><span class=p>();</span> <span class=p>!</span><span class=nx>sameSize</span> <span class=p>{</span>
        <span class=k>return</span> <span class=kc>false</span>
    <span class=p>}</span>
    <span class=k>if</span> <span class=nx>a</span><span class=p>.</span><span class=nx>GetInfo</span><span class=p>().</span><span class=nx>String</span><span class=p>()</span> <span class=o>!=</span> <span class=nx>d</span><span class=p>.</span><span class=nx>GetInfo</span><span class=p>().</span><span class=nx>String</span><span class=p>()</span> <span class=p>{</span>
        <span class=k>return</span> <span class=kc>false</span>
    <span class=p>}</span>
    <span class=k>return</span> <span class=kc>true</span>
<span class=p>}</span>

<span class=c1>// IsEmpty indicates whether the Set is empty</span>
<span class=kd>func</span> <span class=p>(</span><span class=nx>d</span> <span class=o>*</span><span class=nx>dataB</span><span class=p>)</span> <span class=nx>IsEmpty</span><span class=p>()</span> <span class=kt>bool</span> <span class=p>{</span>
    <span class=k>return</span> <span class=nx>d</span><span class=p>.</span><span class=nx>Size</span><span class=p>()</span> <span class=o>==</span> <span class=mi>0</span>
<span class=p>}</span>
</code></pre></div><h3>factory<em>method</em>test.go</h3><div class=highlight><pre><code class="go language-go" data-lang=go><span class=kn>package</span> <span class=nx>factory_method_with_reuse</span>

<span class=kn>import</span> <span class=p>(</span>
    <span class=s>&quot;testing&quot;</span>
    <span class=s>&quot;github.com/remogatto/prettytest&quot;</span>
<span class=p>)</span>

<span class=kd>type</span> <span class=nx>mySuite</span> <span class=kd>struct</span> <span class=p>{</span>
    <span class=nx>prettytest</span><span class=p>.</span><span class=nx>Suite</span>
<span class=p>}</span>

<span class=kd>func</span> <span class=nx>TestRunner</span><span class=p>(</span><span class=nx>t</span> <span class=o>*</span><span class=nx>testing</span><span class=p>.</span><span class=nx>T</span><span class=p>)</span> <span class=p>{</span>
    <span class=nx>prettytest</span><span class=p>.</span><span class=nx>Run</span><span class=p>(</span><span class=nx>t</span><span class=p>,</span> <span class=nb>new</span><span class=p>(</span><span class=nx>mySuite</span><span class=p>))</span>
<span class=p>}</span>

<span class=kd>func</span> <span class=p>(</span><span class=nx>s</span> <span class=o>*</span><span class=nx>mySuite</span><span class=p>)</span> <span class=nx>TestNew</span><span class=p>()</span> <span class=p>{</span>
    <span class=nx>wi</span> <span class=o>:=</span> <span class=nx>WidgetInfo</span><span class=p>{</span><span class=mi>1001</span><span class=p>,</span> <span class=s>&quot;A&quot;</span><span class=p>}</span>
    <span class=nx>s</span><span class=p>.</span><span class=nx>Equal</span><span class=p>(</span><span class=nx>wi</span><span class=p>.</span><span class=nx>name</span><span class=p>,</span> <span class=s>&quot;A&quot;</span><span class=p>)</span>

    <span class=nx>w</span> <span class=o>:=</span> <span class=nx>Widget</span><span class=p>{</span><span class=nx>WidgetInfo</span><span class=p>{</span><span class=mi>1001</span><span class=p>,</span> <span class=s>&quot;A&quot;</span><span class=p>}}</span>
    <span class=nx>s</span><span class=p>.</span><span class=nx>Equal</span><span class=p>(</span><span class=nx>w</span><span class=p>.</span><span class=nx>name</span><span class=p>,</span> <span class=s>&quot;A&quot;</span><span class=p>)</span>

    <span class=nx>wa</span> <span class=o>:=</span> <span class=nx>New</span><span class=p>(</span><span class=nx>Widget_A</span><span class=p>,</span> <span class=nx>WidgetInfo</span><span class=p>{</span><span class=mi>1001</span><span class=p>,</span> <span class=s>&quot;A&quot;</span><span class=p>})</span>
    <span class=nx>s</span><span class=p>.</span><span class=nx>Equal</span><span class=p>(</span><span class=nx>wa</span><span class=p>.</span><span class=nx>GetInfo</span><span class=p>().</span><span class=nx>id</span><span class=p>,</span> <span class=mi>1001</span><span class=p>)</span>
    <span class=nx>s</span><span class=p>.</span><span class=nx>Equal</span><span class=p>(</span><span class=nx>wa</span><span class=p>.</span><span class=nx>GetInfo</span><span class=p>().</span><span class=nx>name</span><span class=p>,</span> <span class=s>&quot;A&quot;</span><span class=p>)</span>
<span class=p>}</span>

<span class=kd>func</span> <span class=p>(</span><span class=nx>s</span> <span class=o>*</span><span class=nx>mySuite</span><span class=p>)</span> <span class=nx>TestAdd</span><span class=p>()</span> <span class=p>{</span>
    <span class=nx>wa</span> <span class=o>:=</span> <span class=nx>New</span><span class=p>(</span><span class=nx>Widget_A</span><span class=p>,</span> <span class=nx>WidgetInfo</span><span class=p>{</span><span class=mi>1001</span><span class=p>,</span> <span class=s>&quot;A&quot;</span><span class=p>})</span>
    <span class=nx>wa</span><span class=p>.</span><span class=nx>Add</span><span class=p>(</span><span class=s>&quot;thinga&quot;</span><span class=p>,</span> <span class=s>&quot;ma&quot;</span><span class=p>,</span> <span class=s>&quot;bop&quot;</span><span class=p>,</span> <span class=mi>1</span><span class=p>,</span> <span class=mi>2</span><span class=p>)</span>
    <span class=nx>s</span><span class=p>.</span><span class=nx>Equal</span><span class=p>(</span><span class=nx>wa</span><span class=p>.</span><span class=nx>Size</span><span class=p>(),</span> <span class=mi>5</span><span class=p>)</span>
<span class=p>}</span>

<span class=kd>func</span> <span class=p>(</span><span class=nx>s</span> <span class=o>*</span><span class=nx>mySuite</span><span class=p>)</span> <span class=nx>TestRemove</span><span class=p>()</span> <span class=p>{</span>
    <span class=nx>wa</span> <span class=o>:=</span> <span class=nx>New</span><span class=p>(</span><span class=nx>Widget_A</span><span class=p>,</span> <span class=nx>WidgetInfo</span><span class=p>{</span><span class=mi>1001</span><span class=p>,</span> <span class=s>&quot;A&quot;</span><span class=p>})</span>
    <span class=nx>wa</span><span class=p>.</span><span class=nx>Add</span><span class=p>(</span><span class=s>&quot;thinga&quot;</span><span class=p>,</span> <span class=s>&quot;ma&quot;</span><span class=p>,</span> <span class=s>&quot;bop&quot;</span><span class=p>)</span>
    <span class=nx>wa</span><span class=p>.</span><span class=nx>Remove</span><span class=p>(</span><span class=s>&quot;bop&quot;</span><span class=p>)</span>
    <span class=nx>s</span><span class=p>.</span><span class=nx>Equal</span><span class=p>(</span><span class=nx>wa</span><span class=p>.</span><span class=nx>Size</span><span class=p>(),</span> <span class=mi>2</span><span class=p>)</span>

    <span class=nx>wa</span><span class=p>.</span><span class=nx>Remove</span><span class=p>(</span><span class=s>&quot;ma&quot;</span><span class=p>)</span>
    <span class=nx>s</span><span class=p>.</span><span class=nx>Equal</span><span class=p>(</span><span class=nx>wa</span><span class=p>.</span><span class=nx>Size</span><span class=p>(),</span> <span class=mi>1</span><span class=p>)</span>

    <span class=nx>wa</span><span class=p>.</span><span class=nx>Remove</span><span class=p>(</span><span class=s>&quot;xxx&quot;</span><span class=p>)</span>
    <span class=nx>s</span><span class=p>.</span><span class=nx>Equal</span><span class=p>(</span><span class=nx>wa</span><span class=p>.</span><span class=nx>Size</span><span class=p>(),</span> <span class=mi>1</span><span class=p>)</span>
<span class=p>}</span>

<span class=kd>func</span> <span class=p>(</span><span class=nx>s</span> <span class=o>*</span><span class=nx>mySuite</span><span class=p>)</span> <span class=nx>TestIsEqual</span><span class=p>()</span> <span class=p>{</span>
    <span class=nx>wa</span> <span class=o>:=</span> <span class=nx>New</span><span class=p>(</span><span class=nx>Widget_A</span><span class=p>,</span> <span class=nx>WidgetInfo</span><span class=p>{</span><span class=mi>1001</span><span class=p>,</span> <span class=s>&quot;A&quot;</span><span class=p>})</span>
    <span class=nx>wa</span><span class=p>.</span><span class=nx>Add</span><span class=p>(</span><span class=s>&quot;thinga&quot;</span><span class=p>,</span> <span class=s>&quot;ma&quot;</span><span class=p>,</span> <span class=s>&quot;bop&quot;</span><span class=p>)</span>
    <span class=nx>wb</span> <span class=o>:=</span> <span class=nx>New</span><span class=p>(</span><span class=nx>Widget_B</span><span class=p>,</span> <span class=nx>WidgetInfo</span><span class=p>{</span><span class=mi>1001</span><span class=p>,</span> <span class=s>&quot;B&quot;</span><span class=p>})</span>
    <span class=nx>wb</span><span class=p>.</span><span class=nx>Add</span><span class=p>(</span><span class=s>&quot;thinga&quot;</span><span class=p>,</span> <span class=s>&quot;ma&quot;</span><span class=p>,</span> <span class=s>&quot;bop&quot;</span><span class=p>)</span>
    <span class=nx>s</span><span class=p>.</span><span class=nx>Equal</span><span class=p>(</span><span class=nx>wa</span><span class=p>.</span><span class=nx>IsEqual</span><span class=p>(</span><span class=nx>wb</span><span class=p>),</span> <span class=kc>false</span><span class=p>)</span>

    <span class=nx>wc</span> <span class=o>:=</span> <span class=nx>New</span><span class=p>(</span><span class=nx>Widget_A</span><span class=p>,</span> <span class=nx>WidgetInfo</span><span class=p>{</span><span class=mi>1001</span><span class=p>,</span> <span class=s>&quot;A&quot;</span><span class=p>})</span>
    <span class=nx>wc</span><span class=p>.</span><span class=nx>Add</span><span class=p>(</span><span class=s>&quot;thinga&quot;</span><span class=p>,</span> <span class=s>&quot;ma&quot;</span><span class=p>,</span> <span class=s>&quot;bop&quot;</span><span class=p>)</span>
    <span class=nx>s</span><span class=p>.</span><span class=nx>Equal</span><span class=p>(</span><span class=nx>wa</span><span class=p>.</span><span class=nx>IsEqual</span><span class=p>(</span><span class=nx>wc</span><span class=p>),</span> <span class=kc>true</span><span class=p>)</span>

    <span class=nx>wc</span><span class=p>.</span><span class=nx>SetInfo</span><span class=p>(</span><span class=mi>1001</span><span class=p>,</span> <span class=s>&quot;C&quot;</span><span class=p>)</span>
    <span class=nx>s</span><span class=p>.</span><span class=nx>Equal</span><span class=p>(</span><span class=nx>wa</span><span class=p>.</span><span class=nx>IsEqual</span><span class=p>(</span><span class=nx>wc</span><span class=p>),</span> <span class=kc>false</span><span class=p>)</span>

    <span class=nx>wc</span><span class=p>.</span><span class=nx>SetInfo</span><span class=p>(</span><span class=mi>1001</span><span class=p>,</span> <span class=s>&quot;A&quot;</span><span class=p>)</span>
    <span class=nx>s</span><span class=p>.</span><span class=nx>Equal</span><span class=p>(</span><span class=nx>wa</span><span class=p>.</span><span class=nx>IsEqual</span><span class=p>(</span><span class=nx>wc</span><span class=p>),</span> <span class=kc>true</span><span class=p>)</span>

    <span class=nx>wc</span><span class=p>.</span><span class=nx>Remove</span><span class=p>(</span><span class=s>&quot;bop&quot;</span><span class=p>)</span>
    <span class=nx>s</span><span class=p>.</span><span class=nx>Equal</span><span class=p>(</span><span class=nx>wa</span><span class=p>.</span><span class=nx>IsEqual</span><span class=p>(</span><span class=nx>wc</span><span class=p>),</span> <span class=kc>false</span><span class=p>)</span>
<span class=p>}</span>
</code></pre></div><hr><h2>Notes</h2><p>Java requires you to explicitly declare that a class &quot;implements&quot; an interface, but in Go you simply implement the methods defined by the interface.</p><p>So, in Go <strong>inheritance</strong>. is achieved by way of <strong>duck typing</strong>:</p><blockquote><p>If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.</p></blockquote><p>Given the following interface definition:</p><div class=highlight><pre><code class="go language-go" data-lang=go><span class=kd>type</span> <span class=nx>Widget_iface</span> <span class=kd>interface</span> <span class=p>{</span>
    <span class=nx>SetInfo</span><span class=p>(</span><span class=nx>id</span> <span class=kt>int</span><span class=p>,</span> <span class=nx>name</span> <span class=kt>string</span><span class=p>)</span>
    <span class=nx>GetInfo</span><span class=p>()</span> <span class=nx>WidgetInfo</span>
    <span class=nx>Add</span><span class=p>(</span><span class=nx>items</span> <span class=o>...</span><span class=kd>interface</span><span class=p>{})</span>
    <span class=nx>Remove</span><span class=p>(</span><span class=nx>items</span> <span class=o>...</span><span class=kd>interface</span><span class=p>{})</span>
    <span class=nx>IsEqual</span><span class=p>(</span><span class=nx>a</span> <span class=nx>Widget_iface</span><span class=p>)</span> <span class=kt>bool</span>
    <span class=nx>Size</span><span class=p>()</span> <span class=kt>int</span>
<span class=p>}</span>
</code></pre></div><p>Each widget has an anonymous field, <strong>WidgetInfo</strong>, that implements SetInfo and GetInfo and those methods can be reused by each widget.</p><p>Each widget (WidgetA and WidgetB) must implement Add, Remove, IsEqual and Size.</p><p>Each widget&#39;s implementation of Add, Remove, IsEqual and Size is completely hidden from the caller.</p><p>Go does not have inheritance baked in, but you can achieve inheritance effects using interfaces and composition.</p><p>Note that <strong>...interface{}</strong> parameter for Add, Remove, IsEqual and Size is what enables those methods to accept any widget type (WidgetA or WidgetB).</p><p>The interface parameter is what enables <strong>polymorphism</strong> in Go: The implementation of Add, Remove, IsEqual and Size can be written without any mention of any specific widget type and thus can be used transparently with each type.</p><h4>Enforce interface compliance</h4><div class=highlight><pre><code class="go language-go" data-lang=go><span class=kd>var</span> <span class=nx>_</span> <span class=nx>Widget_iface</span> <span class=p>=</span> <span class=nx>w</span> 
</code></pre></div><p>Note that there no type assertions/type-casting required in our example yet we still have the benefit of compile-time type-checking with the line above.</p><h4>Polymorphism</h4><p>To see an example of polymorphism in Go, check out the <a href=http://l3x.github.io/golang-code-examples/2014/07/15/polymorphic-shapes.html>Polymorphic Shapes</a> article.</p><h4>Thread Safety</h4><p>The underlying data structure in this example is a map.</p><p>Maps in Go are not thread safe.</p><p>If you need thread safety, use either channels or a mutex.</p><h3>PrettyTest</h3><p>We use <strong>prettytest</strong> to test our code.</p><p>For a description of prettytest, see <a href=http://localhost:9000/2014/08/21/invoicing-usd-and-prettytest.html>Invoicing USD and PrettyTest</a></p><hr><h2>Output</h2><p><img src=https://raw.githubusercontent.com/go-goodies/go_oops/master/factory_method_with_reuse/pta-factory-method-reuse.png alt=pta></p><hr><h2>Conclusion</h2><p>Go is expressive, concise, clean, and efficient. Its novel type system enables flexible and modular program construction. Go compiles quickly to machine code yet has the convenience of garbage collection and the power of run-time reflection. It&#39;s a fast, statically typed, compiled language that feels like a dynamically typed, interpreted language.</p><p>So, every time that I think, &quot;There are no &#39;objects&#39; in Golang. Where are the objects?&quot; ... or &quot;Where are the &#39;generics&#39;?&quot; ... or &quot;Where are the built-in functional programming idioms?&quot;, Go provides a better way of doing what I want to do.</p><hr><h2>References</h2><ul><li><a href=http://www.javaworld.com/article/2073649/core-java/why-extends-is-evil.html>Why extends is evil</a></li><li><a href=http://en.wikipedia.org/wiki/Polymorphism_(computer_science)>Polymorphism</a></li><li><a href="https://github.com/remogatto/prettytest/">prettytest</a></li><li><a href=http://godoc.org/github.com/remogatto/prettytest>API Documentation for prettytest</a></li><li><a href=https://github.com/go-goodies/go_currency>go_currency</a></li><li><a href=http://godoc.org/github.com/go-goodies/go_currency>API Documentation for go_currency</a></li><li><a href=https://golang.org/doc/faq#inheritance>Why is there no type inheritance?</a></li><li><a href=http://en.wikipedia.org/wiki/Composition_over_inheritance>Composition over inheritance</a></li><li><a href=https://github.com/l3x/golang-code-examples>Golang Code Examples</a></li><li><a href=https://github.com/mindreframer/golang-testing-stuff>Golang Testing Stuff</a></li><li><a href=http://en.wikipedia.org/wiki/Test-driven_development>Test-Driven Development (TDD)</a></li><li><a href="http://tour.golang.org/">Golang Tour</a></li></ul></section></div><!-- Add Disqus comments. --><div id=disqus_thread></div><script type=text/javascript>/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'golang-code-examples'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();</script><noscript>Please enable JavaScript to view the <a href=http://disqus.com/?ref_noscript>comments powered by Disqus.</a></noscript><a href=http://disqus.com class=dsq-brlink>comments powered by <span class=logo-disqus>Disqus</span></a></div><div class=footer><div class=contact><div id=name-gravatar class=float-left><span>By Lex Sheehan</span> <span class=l3x-gravatar></span></div><div class=float-right><strong>It's Go Time!</strong></div></div></div><div class=license-notice>The content of this site is licensed under the <a href="http://creativecommons.org/licenses/by/3.0/">Creative Commons 3.0License</a> and code is licensed under a <a href=https://github.com/l3x/golang-code-examples/blob/master/LICENSE>BSD license</a></div></div><script src=/golang-code-examples/scripts/scripts.db44.js></script></body></html>
